using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libtask"], :libtask),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/hessammehr/LibtaskBuilder2/releases/download/0.2.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/libtask.arm-linux-gnueabihf.tar.gz", "984b76a86078c4f7b7c8f6723abc960f4643f50543d5fb95035ebc7802024919"),
    Linux(:i686, :glibc) => ("$bin_prefix/libtask.i686-linux-gnu.tar.gz", "762d774839116dea7193bb32e6b389d8968c02ebe3fd386d4d1b84892625afbf"),
    Windows(:i686) => ("$bin_prefix/libtask.i686-w64-mingw32.tar.gz", "b9fe71deda5c3cca66be2b9078a18be379d37cde1f19909dc96000e5333b5824"),
    MacOS(:x86_64) => ("$bin_prefix/libtask.x86_64-apple-darwin14.tar.gz", "f76eeec0b16adc33ce3363fd7b3347891e6d82065a5a14236a24d64df171f032"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/libtask.x86_64-linux-gnu.tar.gz", "c45d5bc7d7fb12188212e826a8d7d03bbe86d30863f3572133b572150e131ce3"),
    Windows(:x86_64) => ("$bin_prefix/libtask.x86_64-w64-mingw32.tar.gz", "a88a1b749014aa893bf7a7e94235ed717a054aa7602ac130056e84e1e4181471"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
