I"<p><a id="Index"></a></p>

<p><a id="Index-1"></a></p>

<h2 id="index">Index</h2>

<ul>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.ADBijector"><code class="language-plaintext highlighter-rouge">Bijectors.ADBijector</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.AbstractBijector"><code class="language-plaintext highlighter-rouge">Bijectors.AbstractBijector</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.Bijector"><code class="language-plaintext highlighter-rouge">Bijectors.Bijector</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.Composed"><code class="language-plaintext highlighter-rouge">Bijectors.Composed</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.Inverse"><code class="language-plaintext highlighter-rouge">Bijectors.Inverse</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.Permute"><code class="language-plaintext highlighter-rouge">Bijectors.Permute</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.Stacked"><code class="language-plaintext highlighter-rouge">Bijectors.Stacked</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.bijector-Tuple{Distribution{Univariate,Discrete}}"><code class="language-plaintext highlighter-rouge">Bijectors.bijector</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.composel-Union{Tuple{Vararg{Bijector{N},N1} where N1}, Tuple{N}} where N"><code class="language-plaintext highlighter-rouge">Bijectors.composel</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.composer-Union{Tuple{Vararg{Bijector{N},N1} where N1}, Tuple{N}} where N"><code class="language-plaintext highlighter-rouge">Bijectors.composer</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.forward-Tuple{Distribution}"><code class="language-plaintext highlighter-rouge">Bijectors.forward</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.forward-Tuple{Bijector,Any}"><code class="language-plaintext highlighter-rouge">Bijectors.forward</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.isclosedform-Tuple{Bijector}"><code class="language-plaintext highlighter-rouge">Bijectors.isclosedform</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.logabsdetjac-Tuple{Inverse{#s23,N} where N where #s23&lt;:Bijector,Any}"><code class="language-plaintext highlighter-rouge">Bijectors.logabsdetjac</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.logabsdetjac-Tuple{ADBijector,Real}"><code class="language-plaintext highlighter-rouge">Bijectors.logabsdetjac</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.logabsdetjacinv-Tuple{Bijectors.TransformedDistribution{#s88,#s87,Univariate} where #s87&lt;:Bijector where #s88&lt;:Distribution,Real}"><code class="language-plaintext highlighter-rouge">Bijectors.logabsdetjacinv</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.logabsdetjacinv-Tuple{Bijector,Any}"><code class="language-plaintext highlighter-rouge">Bijectors.logabsdetjacinv</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.logpdf_with_jac-Tuple{Bijectors.TransformedDistribution{#s88,#s87,Univariate} where #s87&lt;:Bijector where #s88&lt;:Distribution,Real}"><code class="language-plaintext highlighter-rouge">Bijectors.logpdf_with_jac</code></a></li>
  <li><a href="/dev/docs/library/bijectors/#Bijectors.transformed-Tuple{Distribution,Bijector}"><code class="language-plaintext highlighter-rouge">Bijectors.transformed</code></a></li>
</ul>

<p><a id="Functions"></a></p>

<p><a id="Functions-1"></a></p>

<h2 id="functions">Functions</h2>

<p><a id="Bijectors.bijector-Tuple{Distribution{Univariate,Discrete}}" href="#Bijectors.bijector-Tuple{Distribution{Univariate,Discrete}}">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.bijector</code></strong> — <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bijector</span><span class="x">(</span><span class="n">d</span><span class="o">::</span><span class="n">Distribution</span><span class="x">)</span>
</code></pre></div></div>

<p>Returns the constrained-to-unconstrained bijector for distribution <code class="language-plaintext highlighter-rouge">d</code>.</p>

<p><a id="Bijectors.composel-Union{Tuple{Vararg{Bijector{N},N1} where N1}, Tuple{N}} where N" href="#Bijectors.composel-Union{Tuple{Vararg{Bijector{N},N1} where N1}, Tuple{N}} where N">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.composel</code></strong> — <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">composel</span><span class="x">(</span><span class="n">ts</span><span class="o">::</span><span class="n">Bijector</span><span class="o">...</span><span class="x">)</span><span class="o">::</span><span class="n">Composed</span><span class="x">{</span><span class="o">&lt;:</span><span class="kt">Tuple</span><span class="x">}</span>
</code></pre></div></div>

<p>Constructs <code class="language-plaintext highlighter-rouge">Composed</code> such that <code class="language-plaintext highlighter-rouge">ts</code> are applied left-to-right.</p>

<p><a id="Bijectors.composer-Union{Tuple{Vararg{Bijector{N},N1} where N1}, Tuple{N}} where N" href="#Bijectors.composer-Union{Tuple{Vararg{Bijector{N},N1} where N1}, Tuple{N}} where N">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.composer</code></strong> — <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">composer</span><span class="x">(</span><span class="n">ts</span><span class="o">::</span><span class="n">Bijector</span><span class="o">...</span><span class="x">)</span><span class="o">::</span><span class="n">Composed</span><span class="x">{</span><span class="o">&lt;:</span><span class="kt">Tuple</span><span class="x">}</span>
</code></pre></div></div>

<p>Constructs <code class="language-plaintext highlighter-rouge">Composed</code> such that <code class="language-plaintext highlighter-rouge">ts</code> are applied right-to-left.</p>

<p><a id="Bijectors.forward-Tuple{Bijector,Any}" href="#Bijectors.forward-Tuple{Bijector,Any}">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.forward</code></strong> — <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">forward</span><span class="x">(</span><span class="n">b</span><span class="o">::</span><span class="n">Bijector</span><span class="x">,</span> <span class="n">x</span><span class="x">)</span>
</code></pre></div></div>

<p>Computes both <code class="language-plaintext highlighter-rouge">transform</code> and <code class="language-plaintext highlighter-rouge">logabsdetjac</code> in one forward pass, and returns a named tuple <code class="language-plaintext highlighter-rouge">(rv=b(x), logabsdetjac=logabsdetjac(b, x))</code>.</p>

<p>This defaults to the call above, but often one can re-use computation in the computation of the forward pass and the computation of the <code class="language-plaintext highlighter-rouge">logabsdetjac</code>. <code class="language-plaintext highlighter-rouge">forward</code> allows the user to take advantange of such efficiencies, if they exist.</p>

<p><a id="Bijectors.forward-Tuple{Distribution}" href="#Bijectors.forward-Tuple{Distribution}">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.forward</code></strong> — <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">forward</span><span class="x">(</span><span class="n">d</span><span class="o">::</span><span class="n">Distribution</span><span class="x">)</span>
<span class="n">forward</span><span class="x">(</span><span class="n">d</span><span class="o">::</span><span class="n">Distribution</span><span class="x">,</span> <span class="n">num_samples</span><span class="o">::</span><span class="kt">Int</span><span class="x">)</span>
</code></pre></div></div>

<p>Returns a <code class="language-plaintext highlighter-rouge">NamedTuple</code> with fields <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>, <code class="language-plaintext highlighter-rouge">logabsdetjac</code> and <code class="language-plaintext highlighter-rouge">logpdf</code>.</p>

<p>In the case where <code class="language-plaintext highlighter-rouge">d isa TransformedDistribution</code>, this means</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">x = rand(d.dist)</code></li>
  <li><code class="language-plaintext highlighter-rouge">y = d.transform(x)</code></li>
  <li><code class="language-plaintext highlighter-rouge">logabsdetjac</code> is the logabsdetjac of the “forward” transform.</li>
  <li><code class="language-plaintext highlighter-rouge">logpdf</code> is the logpdf of <code class="language-plaintext highlighter-rouge">y</code>, not <code class="language-plaintext highlighter-rouge">x</code></li>
</ul>

<p>In the case where <code class="language-plaintext highlighter-rouge">d isa Distribution</code>, this means</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">x = rand(d)</code></li>
  <li><code class="language-plaintext highlighter-rouge">y = x</code></li>
  <li><code class="language-plaintext highlighter-rouge">logabsdetjac = 0.0</code></li>
  <li><code class="language-plaintext highlighter-rouge">logpdf</code> is logpdf of <code class="language-plaintext highlighter-rouge">x</code></li>
</ul>

<p><a id="Bijectors.isclosedform-Tuple{Bijector}" href="#Bijectors.isclosedform-Tuple{Bijector}">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.isclosedform</code></strong> — <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">isclosedform</span><span class="x">(</span><span class="n">b</span><span class="o">::</span><span class="n">Bijector</span><span class="x">)</span><span class="o">::</span><span class="n">bool</span>
<span class="n">isclosedform</span><span class="x">(</span><span class="n">b⁻¹</span><span class="o">::</span><span class="n">Inverse</span><span class="x">{</span><span class="o">&lt;:</span><span class="n">Bijector</span><span class="x">})</span><span class="o">::</span><span class="n">bool</span>
</code></pre></div></div>

<p>Returns <code class="language-plaintext highlighter-rouge">true</code> or <code class="language-plaintext highlighter-rouge">false</code> depending on whether or not evaluation of <code class="language-plaintext highlighter-rouge">b</code> has a closed-form implementation.</p>

<p>Most bijectors have closed-form evaluations, but there are cases where this is not the case. For example the <em>inverse</em> evaluation of <code class="language-plaintext highlighter-rouge">PlanarLayer</code> requires an iterative procedure to evaluate and thus is not differentiable.</p>

<p><a id="Bijectors.logabsdetjac-Tuple{ADBijector,Real}" href="#Bijectors.logabsdetjac-Tuple{ADBijector,Real}">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.logabsdetjac</code></strong> — <em>Method</em>.</p>

<p>Computes the absolute determinant of the Jacobian of the inverse-transformation.</p>

<p><a id="Bijectors.logabsdetjac-Tuple{Inverse{#s23,N} where N where #s23&lt;:Bijector,Any}" href="#Bijectors.logabsdetjac-Tuple{Inverse{#s23,N} where N where #s23&lt;:Bijector,Any}">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.logabsdetjac</code></strong> — <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">logabsdetjac</span><span class="x">(</span><span class="n">b</span><span class="o">::</span><span class="n">Bijector</span><span class="x">,</span> <span class="n">x</span><span class="x">)</span>
<span class="n">logabsdetjac</span><span class="x">(</span><span class="n">ib</span><span class="o">::</span><span class="n">Inverse</span><span class="x">{</span><span class="o">&lt;:</span><span class="n">Bijector</span><span class="x">},</span> <span class="n">y</span><span class="x">)</span>
</code></pre></div></div>

<p>Computes the log(abs(det(J(b(x))))) where J is the jacobian of the transform. Similarily for the inverse-transform.</p>

<p>Default implementation for <code class="language-plaintext highlighter-rouge">Inverse{&lt;:Bijector}</code> is implemented as <code class="language-plaintext highlighter-rouge">- logabsdetjac</code> of original <code class="language-plaintext highlighter-rouge">Bijector</code>.</p>

<p><a id="Bijectors.logabsdetjacinv-Tuple{Bijector,Any}" href="#Bijectors.logabsdetjacinv-Tuple{Bijector,Any}">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.logabsdetjacinv</code></strong> — <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">logabsdetjacinv</span><span class="x">(</span><span class="n">b</span><span class="o">::</span><span class="n">Bijector</span><span class="x">,</span> <span class="n">y</span><span class="x">)</span>
</code></pre></div></div>

<p>Just an alias for <code class="language-plaintext highlighter-rouge">logabsdetjac(inv(b), y)</code>.</p>

<p><a id="Bijectors.logabsdetjacinv-Tuple{Bijectors.TransformedDistribution{#s88,#s87,Univariate} where #s87&lt;:Bijector where #s88&lt;:Distribution,Real}" href="#Bijectors.logabsdetjacinv-Tuple{Bijectors.TransformedDistribution{#s88,#s87,Univariate} where #s87&lt;:Bijector where #s88&lt;:Distribution,Real}">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.logabsdetjacinv</code></strong> — <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">logabsdetjacinv</span><span class="x">(</span><span class="n">td</span><span class="o">::</span><span class="n">UnivariateTransformed</span><span class="x">,</span> <span class="n">y</span><span class="o">::</span><span class="kt">Real</span><span class="x">)</span>
<span class="n">logabsdetjacinv</span><span class="x">(</span><span class="n">td</span><span class="o">::</span><span class="n">MultivariateTransformed</span><span class="x">,</span> <span class="n">y</span><span class="o">::</span><span class="kt">AbstractVector</span><span class="x">{</span><span class="o">&lt;:</span><span class="kt">Real</span><span class="x">})</span>
</code></pre></div></div>

<p>Computes the <code class="language-plaintext highlighter-rouge">logabsdetjac</code> of the <em>inverse</em> transformation, since <code class="language-plaintext highlighter-rouge">rand(td)</code> returns the <em>transformed</em> random variable.</p>

<p><a id="Bijectors.logpdf_with_jac-Tuple{Bijectors.TransformedDistribution{#s88,#s87,Univariate} where #s87&lt;:Bijector where #s88&lt;:Distribution,Real}" href="#Bijectors.logpdf_with_jac-Tuple{Bijectors.TransformedDistribution{#s88,#s87,Univariate} where #s87&lt;:Bijector where #s88&lt;:Distribution,Real}">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.logpdf_with_jac</code></strong> — <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">logpdf_with_jac</span><span class="x">(</span><span class="n">td</span><span class="o">::</span><span class="n">UnivariateTransformed</span><span class="x">,</span> <span class="n">y</span><span class="o">::</span><span class="kt">Real</span><span class="x">)</span>
<span class="n">logpdf_with_jac</span><span class="x">(</span><span class="n">td</span><span class="o">::</span><span class="n">MvTransformed</span><span class="x">,</span> <span class="n">y</span><span class="o">::</span><span class="kt">AbstractVector</span><span class="x">{</span><span class="o">&lt;:</span><span class="kt">Real</span><span class="x">})</span>
<span class="n">logpdf_with_jac</span><span class="x">(</span><span class="n">td</span><span class="o">::</span><span class="n">MatrixTransformed</span><span class="x">,</span> <span class="n">y</span><span class="o">::</span><span class="kt">AbstractMatrix</span><span class="x">{</span><span class="o">&lt;:</span><span class="kt">Real</span><span class="x">})</span>
</code></pre></div></div>

<p>Makes use of the <code class="language-plaintext highlighter-rouge">forward</code> method to potentially re-use computation and returns a tuple <code class="language-plaintext highlighter-rouge">(logpdf, logabsdetjac)</code>.</p>

<p><a id="Bijectors.transformed-Tuple{Distribution,Bijector}" href="#Bijectors.transformed-Tuple{Distribution,Bijector}">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.transformed</code></strong> — <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">transformed</span><span class="x">(</span><span class="n">d</span><span class="o">::</span><span class="n">Distribution</span><span class="x">)</span>
<span class="n">transformed</span><span class="x">(</span><span class="n">d</span><span class="o">::</span><span class="n">Distribution</span><span class="x">,</span> <span class="n">b</span><span class="o">::</span><span class="n">Bijector</span><span class="x">)</span>
</code></pre></div></div>

<p>Couples distribution <code class="language-plaintext highlighter-rouge">d</code> with the bijector <code class="language-plaintext highlighter-rouge">b</code> by returning a <code class="language-plaintext highlighter-rouge">TransformedDistribution</code>.</p>

<p>If no bijector is provided, i.e. <code class="language-plaintext highlighter-rouge">transformed(d)</code> is called, then  <code class="language-plaintext highlighter-rouge">transformed(d, bijector(d))</code> is returned.</p>

<p><a id="Types"></a></p>

<p><a id="Types-1"></a></p>

<h2 id="types">Types</h2>

<p><a id="Bijectors.ADBijector" href="#Bijectors.ADBijector">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.ADBijector</code></strong> — <em>Type</em>.</p>

<p>Abstract type for a <code class="language-plaintext highlighter-rouge">Bijector{N}</code> making use of auto-differentation (AD) to implement <code class="language-plaintext highlighter-rouge">jacobian</code> and, by impliciation, <code class="language-plaintext highlighter-rouge">logabsdetjac</code>.</p>

<p><a id="Bijectors.AbstractBijector" href="#Bijectors.AbstractBijector">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.AbstractBijector</code></strong> — <em>Type</em>.</p>

<p>Abstract type for a bijector.</p>

<p><a id="Bijectors.Bijector" href="#Bijectors.Bijector">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.Bijector</code></strong> — <em>Type</em>.</p>

<p>Abstract type of bijectors with fixed dimensionality.</p>

<p><a id="Bijectors.Composed" href="#Bijectors.Composed">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.Composed</code></strong> — <em>Type</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Composed</span><span class="x">(</span><span class="n">ts</span><span class="o">::</span><span class="n">A</span><span class="x">)</span>

<span class="n">∘</span><span class="x">(</span><span class="n">b1</span><span class="o">::</span><span class="n">Bijector</span><span class="x">{</span><span class="n">N</span><span class="x">},</span> <span class="n">b2</span><span class="o">::</span><span class="n">Bijector</span><span class="x">{</span><span class="n">N</span><span class="x">})</span><span class="o">::</span><span class="n">Composed</span><span class="x">{</span><span class="o">&lt;:</span><span class="kt">Tuple</span><span class="x">}</span>
<span class="n">composel</span><span class="x">(</span><span class="n">ts</span><span class="o">::</span><span class="n">Bijector</span><span class="x">{</span><span class="n">N</span><span class="x">}</span><span class="o">...</span><span class="x">)</span><span class="o">::</span><span class="n">Composed</span><span class="x">{</span><span class="o">&lt;:</span><span class="kt">Tuple</span><span class="x">}</span>
<span class="n">composer</span><span class="x">(</span><span class="n">ts</span><span class="o">::</span><span class="n">Bijector</span><span class="x">{</span><span class="n">N</span><span class="x">}</span><span class="o">...</span><span class="x">)</span><span class="o">::</span><span class="n">Composed</span><span class="x">{</span><span class="o">&lt;:</span><span class="kt">Tuple</span><span class="x">}</span>
</code></pre></div></div>

<p>where <code class="language-plaintext highlighter-rouge">A</code> refers to either</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Tuple{Vararg{&lt;:Bijector{N}}}</code>: a tuple of bijectors of dimensionality <code class="language-plaintext highlighter-rouge">N</code></li>
  <li><code class="language-plaintext highlighter-rouge">AbstractArray{&lt;:Bijector{N}}</code>: an array of bijectors of dimensionality <code class="language-plaintext highlighter-rouge">N</code></li>
</ul>

<p>A <code class="language-plaintext highlighter-rouge">Bijector</code> representing composition of bijectors. <code class="language-plaintext highlighter-rouge">composel</code> and <code class="language-plaintext highlighter-rouge">composer</code> results in a <code class="language-plaintext highlighter-rouge">Composed</code> for which application occurs from left-to-right and right-to-left, respectively.</p>

<p>Note that all the alternative ways of constructing a <code class="language-plaintext highlighter-rouge">Composed</code> returns a <code class="language-plaintext highlighter-rouge">Tuple</code> of bijectors. This ensures type-stability of implementations of all relating methdos, e.g. <code class="language-plaintext highlighter-rouge">inv</code>.</p>

<p>If you want to use an <code class="language-plaintext highlighter-rouge">Array</code> as the container instead you can do</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Composed([b1, b2, ...])
</code></pre></div></div>

<p>In general this is not advised since you lose type-stability, but there might be cases where this is desired, e.g. if you have a insanely large number of bijectors to compose.</p>

<p><strong>Examples</strong></p>

<p><strong>Simple example</strong></p>

<p>Let’s consider a simple example of <code class="language-plaintext highlighter-rouge">Exp</code>:</p>

<pre><code class="language-julia-repl">julia&gt; using Bijectors: Exp

julia&gt; b = Exp()
Exp{0}()

julia&gt; b ∘ b
Composed{Tuple{Exp{0},Exp{0}},0}((Exp{0}(), Exp{0}()))

julia&gt; (b ∘ b)(1.0) == exp(exp(1.0))    # evaluation
true

julia&gt; inv(b ∘ b)(exp(exp(1.0))) == 1.0 # inversion
true

julia&gt; logabsdetjac(b ∘ b, 1.0)         # determinant of jacobian
3.718281828459045
</code></pre>

<p><strong>Notes</strong></p>

<p><strong>Order</strong></p>

<p>It’s important to note that <code class="language-plaintext highlighter-rouge">∘</code> does what is expected mathematically, which means that the bijectors are applied to the input right-to-left, e.g. first applying <code class="language-plaintext highlighter-rouge">b2</code> and then <code class="language-plaintext highlighter-rouge">b1</code>:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="x">(</span><span class="n">b1</span> <span class="n">∘</span> <span class="n">b2</span><span class="x">)(</span><span class="n">x</span><span class="x">)</span> <span class="o">==</span> <span class="n">b1</span><span class="x">(</span><span class="n">b2</span><span class="x">(</span><span class="n">x</span><span class="x">))</span>     <span class="c"># =&gt; true</span>
</code></pre></div></div>

<p>But in the <code class="language-plaintext highlighter-rouge">Composed</code> struct itself, we store the bijectors left-to-right, so that</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cb1</span> <span class="o">=</span> <span class="n">b1</span> <span class="n">∘</span> <span class="n">b2</span>                  <span class="c"># =&gt; Composed.ts == (b2, b1)</span>
<span class="n">cb2</span> <span class="o">=</span> <span class="n">composel</span><span class="x">(</span><span class="n">b2</span><span class="x">,</span> <span class="n">b1</span><span class="x">)</span>         <span class="c"># =&gt; Composed.ts == (b2, b1)</span>
<span class="n">cb1</span><span class="x">(</span><span class="n">x</span><span class="x">)</span> <span class="o">==</span> <span class="n">cb2</span><span class="x">(</span><span class="n">x</span><span class="x">)</span> <span class="o">==</span> <span class="n">b1</span><span class="x">(</span><span class="n">b2</span><span class="x">(</span><span class="n">x</span><span class="x">))</span>  <span class="c"># =&gt; true</span>
</code></pre></div></div>

<p><strong>Structure</strong></p>

<p><code class="language-plaintext highlighter-rouge">∘</code> will result in “flatten” the composition structure while <code class="language-plaintext highlighter-rouge">composel</code> and <code class="language-plaintext highlighter-rouge">composer</code> preserve the compositional structure. This is most easily seen by an example:</p>

<pre><code class="language-julia-repl">julia&gt; b = Exp()
Exp{0}()

julia&gt; cb1 = b ∘ b; cb2 = b ∘ b;

julia&gt; (cb1 ∘ cb2).ts # &lt;= different
(Exp{0}(), Exp{0}(), Exp{0}(), Exp{0}())

julia&gt; (cb1 ∘ cb2).ts isa NTuple{4, Exp{0}}
true

julia&gt; Bijectors.composer(cb1, cb2).ts
(Composed{Tuple{Exp{0},Exp{0}},0}((Exp{0}(), Exp{0}())), Composed{Tuple{Exp{0},Exp{0}},0}((Exp{0}(), Exp{0}())))

julia&gt; Bijectors.composer(cb1, cb2).ts isa Tuple{Composed, Composed}
true
</code></pre>

<p><a id="Bijectors.Inverse" href="#Bijectors.Inverse">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.Inverse</code></strong> — <em>Type</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">inv</span><span class="x">(</span><span class="n">b</span><span class="o">::</span><span class="n">Bijector</span><span class="x">)</span>
<span class="n">Inverse</span><span class="x">(</span><span class="n">b</span><span class="o">::</span><span class="n">Bijector</span><span class="x">)</span>
</code></pre></div></div>

<p>A <code class="language-plaintext highlighter-rouge">Bijector</code> representing the inverse transform of <code class="language-plaintext highlighter-rouge">b</code>.</p>

<p><a id="Bijectors.Permute" href="#Bijectors.Permute">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.Permute</code></strong> — <em>Type</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Permute</span><span class="x">{</span><span class="n">A</span><span class="x">}</span> <span class="o">&lt;:</span> <span class="n">Bijector</span><span class="x">{</span><span class="mi">1</span><span class="x">}</span>
</code></pre></div></div>

<p>A bijector implementation of a permutation. The permutation is performed using a matrix of type <code class="language-plaintext highlighter-rouge">A</code>. There are a couple of different ways to construct <code class="language-plaintext highlighter-rouge">Permute</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Permute([0 1; 1 0])          # will map [1, 2] =&gt; [2, 1]
Permute([2, 1])              # will map [1, 2] =&gt; [2, 1]
Permute(2, 2 =&gt; 1, 1 =&gt; 2)   # will map [1, 2] =&gt; [2, 1]
Permute(2, [1, 2] =&gt; [2, 1]) # will map [1, 2] =&gt; [2, 1]
</code></pre></div></div>

<p>If this is not clear, the examples might be of help.</p>

<p><strong>Examples</strong></p>

<p>A simple example is permuting a vector of size 3.</p>

<pre><code class="language-julia-repl">julia&gt; b1 = Permute([
           0 1 0;
           1 0 0;
           0 0 1
       ])
Permute{Array{Int64,2}}([0 1 0; 1 0 0; 0 0 1])

julia&gt; b2 = Permute([2, 1, 3])           # specify all elements at once
Permute{SparseArrays.SparseMatrixCSC{Float64,Int64}}(

  [2, 1]  =  1.0
  [1, 2]  =  1.0
  [3, 3]  =  1.0)

julia&gt; b3 = Permute(3, 2 =&gt; 1, 1 =&gt; 2)    # element-wise
Permute{SparseArrays.SparseMatrixCSC{Float64,Int64}}(
  [2, 1]  =  1.0
  [1, 2]  =  1.0
  [3, 3]  =  1.0)

julia&gt; b4 = Permute(3, [1, 2] =&gt; [2, 1])  # block-wise
Permute{SparseArrays.SparseMatrixCSC{Float64,Int64}}(
  [2, 1]  =  1.0
  [1, 2]  =  1.0
  [3, 3]  =  1.0)

julia&gt; b1.A == b2.A == b3.A == b4.A
true

julia&gt; b1([1., 2., 3.])
3-element Array{Float64,1}:
 2.0
 1.0
 3.0

julia&gt; b2([1., 2., 3.])
3-element Array{Float64,1}:
 2.0
 1.0
 3.0

julia&gt; b3([1., 2., 3.])
3-element Array{Float64,1}:
 2.0
 1.0
 3.0

julia&gt; b4([1., 2., 3.])
3-element Array{Float64,1}:
 2.0
 1.0
 3.0

julia&gt; inv(b1)
Permute{LinearAlgebra.Transpose{Int64,Array{Int64,2}}}([0 1 0; 1 0 0; 0 0 1])

julia&gt; inv(b1)(b1([1., 2., 3.]))
3-element Array{Float64,1}:
 1.0
 2.0
 3.0
</code></pre>

<p><a id="Bijectors.Stacked" href="#Bijectors.Stacked">#</a>
<strong><code class="language-plaintext highlighter-rouge">Bijectors.Stacked</code></strong> — <em>Type</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Stacked</span><span class="x">(</span><span class="n">bs</span><span class="x">)</span>
<span class="n">Stacked</span><span class="x">(</span><span class="n">bs</span><span class="x">,</span> <span class="n">ranges</span><span class="x">)</span>
<span class="n">stack</span><span class="x">(</span><span class="n">bs</span><span class="o">::</span><span class="n">Bijector</span><span class="x">{</span><span class="mi">0</span><span class="x">}</span><span class="o">...</span><span class="x">)</span> <span class="c"># where `0` means 0-dim `Bijector`</span>
</code></pre></div></div>

<p>A <code class="language-plaintext highlighter-rouge">Bijector</code> which stacks bijectors together which can then be applied to a vector where <code class="language-plaintext highlighter-rouge">bs[i]::Bijector</code> is applied to <code class="language-plaintext highlighter-rouge">x[ranges[i]]::UnitRange{Int}</code>.</p>

<p><strong>Arguments</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bs</code> can be either a <code class="language-plaintext highlighter-rouge">Tuple</code> or an <code class="language-plaintext highlighter-rouge">AbstractArray</code> of 0- and/or 1-dimensional bijectors</p>

    <ul>
      <li>If <code class="language-plaintext highlighter-rouge">bs</code> is a <code class="language-plaintext highlighter-rouge">Tuple</code>, implementations are type-stable using generated functions</li>
      <li>If <code class="language-plaintext highlighter-rouge">bs</code> is an <code class="language-plaintext highlighter-rouge">AbstractArray</code>, implementations are <em>not</em> type-stable and use iterative methods</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ranges</code> needs to be an iterable consisting of <code class="language-plaintext highlighter-rouge">UnitRange{Int}</code></p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">length(bs) == length(ranges)</code> needs to be true.</li>
    </ul>
  </li>
</ul>

<p><strong>Examples</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>b1 = Logit(0.0, 1.0)
b2 = Identity{0}()
b = stack(b1, b2)
b([0.0, 1.0]) == [b1(0.0), 1.0]  # =&gt; true
</code></pre></div></div>

:ET