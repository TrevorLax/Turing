I"-Ò<h1 id="bayesian-estimation-of-differential-equations">Bayesian Estimation of Differential Equations</h1>

<p>Most of the scientific community deals with the basic problem of trying to mathematically model the reality around them and this often involves dynamical systems. The general trend to model these complex dynamical systems is through the use of differential equations. Differential equation models often have non-measurable parameters. The popular ‚Äúforward-problem‚Äù of simulation consists of solving the differential equations for a given set of parameters, the ‚Äúinverse problem‚Äù to simulation, known as parameter estimation, is the process of utilizing data to determine these model parameters. Bayesian inference provides a robust approach to parameter estimation with quantified uncertainty.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">Turing</span><span class="x">,</span> <span class="n">Distributions</span><span class="x">,</span> <span class="n">DataFrames</span><span class="x">,</span> <span class="n">DifferentialEquations</span><span class="x">,</span> <span class="n">DiffEqSensitivity</span>

<span class="c"># Import MCMCChain, Plots, and StatsPlots for visualizations and diagnostics.</span>
<span class="k">using</span> <span class="n">MCMCChains</span><span class="x">,</span> <span class="n">Plots</span><span class="x">,</span> <span class="n">StatsPlots</span>

<span class="c"># Set a seed for reproducibility.</span>
<span class="k">using</span> <span class="n">Random</span>
<span class="n">Random</span><span class="o">.</span><span class="n">seed!</span><span class="x">(</span><span class="mi">12</span><span class="x">);</span>
</code></pre></div></div>

<h2 id="the-lotka-volterra-model">The Lotka-Volterra Model</h2>

<p>The Lotka‚ÄìVolterra equations, also known as the predator‚Äìprey equations, are a pair of first-order nonlinear differential equations, frequently used to describe the dynamics of biological systems in which two species interact, one as a predator and the other as prey. The populations change through time according to the pair of equations:</p>

\[\frac{dx}{dt} = (\alpha - \beta y)x\]

\[\frac{dy}{dt} = (\delta x - \gamma)y\]

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="nf"> lotka_volterra</span><span class="x">(</span><span class="n">du</span><span class="x">,</span><span class="n">u</span><span class="x">,</span><span class="n">p</span><span class="x">,</span><span class="n">t</span><span class="x">)</span>
  <span class="n">x</span><span class="x">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">u</span>
  <span class="n">Œ±</span><span class="x">,</span> <span class="n">Œ≤</span><span class="x">,</span> <span class="n">Œ¥</span><span class="x">,</span> <span class="n">Œ≥</span> <span class="o">=</span> <span class="n">p</span>
  <span class="n">du</span><span class="x">[</span><span class="mi">1</span><span class="x">]</span> <span class="o">=</span> <span class="n">dx</span> <span class="o">=</span> <span class="x">(</span><span class="n">Œ±</span> <span class="o">-</span> <span class="n">Œ≤</span><span class="o">*</span><span class="n">y</span><span class="x">)</span><span class="n">x</span>
  <span class="n">du</span><span class="x">[</span><span class="mi">2</span><span class="x">]</span> <span class="o">=</span> <span class="n">dy</span> <span class="o">=</span> <span class="x">(</span><span class="n">Œ¥</span><span class="o">*</span><span class="n">x</span> <span class="o">-</span> <span class="n">Œ≥</span><span class="x">)</span><span class="n">y</span>
<span class="k">end</span>
<span class="n">p</span> <span class="o">=</span> <span class="x">[</span><span class="mf">1.5</span><span class="x">,</span> <span class="mf">1.0</span><span class="x">,</span> <span class="mf">3.0</span><span class="x">,</span> <span class="mf">1.0</span><span class="x">]</span>
<span class="n">u0</span> <span class="o">=</span> <span class="x">[</span><span class="mf">1.0</span><span class="x">,</span><span class="mf">1.0</span><span class="x">]</span>
<span class="n">prob</span> <span class="o">=</span> <span class="n">ODEProblem</span><span class="x">(</span><span class="n">lotka_volterra</span><span class="x">,</span><span class="n">u0</span><span class="x">,(</span><span class="mf">0.0</span><span class="x">,</span><span class="mf">10.0</span><span class="x">),</span><span class="n">p</span><span class="x">)</span>
<span class="n">sol</span> <span class="o">=</span> <span class="n">solve</span><span class="x">(</span><span class="n">prob</span><span class="x">,</span><span class="n">Tsit5</span><span class="x">())</span>
<span class="n">plot</span><span class="x">(</span><span class="n">sol</span><span class="x">)</span>
</code></pre></div></div>

<p><img src="../10_BayesianDiffEq_files/10_BayesianDiffEq_3_0.svg" alt="svg" /></p>

<p>We‚Äôll generate the data to use for the parameter estimation from simulation. 
With the <code class="language-plaintext highlighter-rouge">saveat</code> <a href="https://docs.sciml.ai/latest/basics/common_solver_opts/">argument</a> we specify that the solution is stored only at <code class="language-plaintext highlighter-rouge">0.1</code> time units.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">odedata</span> <span class="o">=</span> <span class="kt">Array</span><span class="x">(</span><span class="n">solve</span><span class="x">(</span><span class="n">prob</span><span class="x">,</span><span class="n">Tsit5</span><span class="x">(),</span><span class="n">saveat</span><span class="o">=</span><span class="mf">0.1</span><span class="x">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2√ó101 Array{Float64,2}:
 1.0  1.03981  1.05332  1.03247  0.972908  ‚Ä¶  0.133965  0.148601  0.165247
 1.0  1.22939  1.52387  1.88714  2.30908      0.476902  0.450153  0.426924
</code></pre></div></div>

<h2 id="fitting-lotka-volterra-with-diffeqbayes">Fitting Lotka-Volterra with DiffEqBayes</h2>

<p><a href="https://github.com/SciML/DiffEqBayes.jl">DiffEqBayes.jl</a> is a high level package that set of extension functionality for estimating the parameters of differential equations using Bayesian methods. It allows the choice of using CmdStan.jl, Turing.jl, DynamicHMC.jl and ApproxBayes.jl to perform a Bayesian estimation of a differential equation problem specified via the DifferentialEquations.jl interface. You can read the <a href="https://docs.sciml.ai/latest/analysis/parameter_estimation/#Bayesian-Methods-1">docs</a> for an understanding of the available functionality.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">DiffEqBayes</span>
<span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="o">:</span><span class="mf">0.1</span><span class="o">:</span><span class="mf">10.0</span>
<span class="n">priors</span> <span class="o">=</span> <span class="x">[</span><span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.5</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mf">0.5</span><span class="x">,</span><span class="mf">2.5</span><span class="x">),</span><span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.2</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">0</span><span class="x">,</span><span class="mi">2</span><span class="x">),</span><span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">3.0</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">1</span><span class="x">,</span><span class="mi">4</span><span class="x">),</span><span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.0</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">0</span><span class="x">,</span><span class="mi">2</span><span class="x">)]</span>
<span class="n">bayesian_result_turing</span> <span class="o">=</span> <span class="n">turing_inference</span><span class="x">(</span><span class="n">prob</span><span class="x">,</span><span class="n">Tsit5</span><span class="x">(),</span><span class="n">t</span><span class="x">,</span><span class="n">odedata</span><span class="x">,</span><span class="n">priors</span><span class="x">,</span><span class="n">num_samples</span><span class="o">=</span><span class="mi">10_000</span><span class="x">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Info: Found initial step size
‚îÇ   œµ = 0.00625
‚îî @ Turing.Inference /home/cameron/.julia/packages/Turing/GMBTf/src/inference/hmc.jl:629
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47





Object of type Chains, with data of type 9000√ó17√ó1 Array{Float64,3}

Iterations        = 1:9000
Thinning interval = 1
Chains            = 1
Samples per chain = 9000
internals         = acceptance_rate, hamiltonian_energy, hamiltonian_energy_error, is_accept, log_density, lp, max_hamiltonian_energy_error, n_steps, nom_step_size, numerical_error, step_size, tree_depth
parameters        = theta[1], theta[2], theta[3], theta[4], œÉ[1]

2-element Array{ChainDataFrame,1}

Summary Statistics
  parameters    mean     std  naive_se    mcse        ess   r_hat
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    theta[1]  2.3263  0.1073    0.0011  0.0021  2202.3643  1.0000
    theta[2]  1.5434  0.0957    0.0010  0.0019  2575.4033  1.0002
    theta[3]  3.1259  0.1983    0.0021  0.0031  4127.1344  1.0000
    theta[4]  1.8356  0.0827    0.0009  0.0017  2189.2825  1.0000
        œÉ[1]  0.8569  0.0436    0.0005  0.0005  6856.5421  0.9999

Quantiles
  parameters    2.5%   25.0%   50.0%   75.0%   97.5%
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    theta[1]  2.1185  2.2428  2.3337  2.4169  2.4916
    theta[2]  1.3655  1.4750  1.5422  1.6075  1.7367
    theta[3]  2.7571  2.9893  3.1166  3.2546  3.5440
    theta[4]  1.6902  1.7708  1.8307  1.9006  1.9868
        œÉ[1]  0.7755  0.8266  0.8551  0.8847  0.9484
</code></pre></div></div>

<p>The estimated parameters are clearly very close to the desired parameter values. We can also check that the chains have converged in the plot.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="x">(</span><span class="n">bayesian_result_turing</span><span class="x">)</span>
</code></pre></div></div>

<p><img src="../10_BayesianDiffEq_files/10_BayesianDiffEq_9_0.svg" alt="svg" /></p>

<h2 id="direct-handling-of-bayesian-estimation-with-turing">Direct Handling of Bayesian Estimation with Turing</h2>

<p>You could want to do some sort of reduction with the differential equation‚Äôs solution or use it in some other way as well. In those cases DiffEqBayes might not be useful. Turing and DifferentialEquations are completely composable and you can write of the differential equation inside a Turing <code class="language-plaintext highlighter-rouge">@model</code> and it will just work.</p>

<p>We can rewrite the Lotka Volterra parameter estimation problem with a Turing <code class="language-plaintext highlighter-rouge">@model</code> interface as below</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Turing</span><span class="o">.</span><span class="n">setadbackend</span><span class="x">(</span><span class="o">:</span><span class="n">forwarddiff</span><span class="x">)</span>

<span class="nd">@model</span> <span class="k">function</span><span class="nf"> fitlv</span><span class="x">(</span><span class="n">data</span><span class="x">)</span>
    <span class="n">œÉ</span> <span class="o">~</span> <span class="n">InverseGamma</span><span class="x">(</span><span class="mi">2</span><span class="x">,</span> <span class="mi">3</span><span class="x">)</span>
    <span class="n">Œ±</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.5</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mf">0.5</span><span class="x">,</span><span class="mf">2.5</span><span class="x">)</span>
    <span class="n">Œ≤</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.2</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">0</span><span class="x">,</span><span class="mi">2</span><span class="x">)</span>
    <span class="n">Œ≥</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">3.0</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">1</span><span class="x">,</span><span class="mi">4</span><span class="x">)</span>
    <span class="n">Œ¥</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.0</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">0</span><span class="x">,</span><span class="mi">2</span><span class="x">)</span>

    <span class="n">p</span> <span class="o">=</span> <span class="x">[</span><span class="n">Œ±</span><span class="x">,</span><span class="n">Œ≤</span><span class="x">,</span><span class="n">Œ≥</span><span class="x">,</span><span class="n">Œ¥</span><span class="x">]</span>
    <span class="n">prob</span> <span class="o">=</span> <span class="n">ODEProblem</span><span class="x">(</span><span class="n">lotka_volterra</span><span class="x">,</span><span class="n">u0</span><span class="x">,(</span><span class="mf">0.0</span><span class="x">,</span><span class="mf">10.0</span><span class="x">),</span><span class="n">p</span><span class="x">)</span>
    <span class="n">predicted</span> <span class="o">=</span> <span class="n">solve</span><span class="x">(</span><span class="n">prob</span><span class="x">,</span><span class="n">Tsit5</span><span class="x">(),</span><span class="n">saveat</span><span class="o">=</span><span class="mf">0.1</span><span class="x">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="x">(</span><span class="n">predicted</span><span class="x">)</span>
        <span class="n">data</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">i</span><span class="x">]</span> <span class="o">~</span> <span class="n">MvNormal</span><span class="x">(</span><span class="n">predicted</span><span class="x">[</span><span class="n">i</span><span class="x">],</span> <span class="n">œÉ</span><span class="x">)</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">fitlv</span><span class="x">(</span><span class="n">odedata</span><span class="x">)</span>
<span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="x">(</span><span class="n">model</span><span class="x">,</span> <span class="n">NUTS</span><span class="x">(</span><span class="o">.</span><span class="mi">65</span><span class="x">),</span><span class="mi">10000</span><span class="x">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚îå Info: Found initial step size
‚îÇ   œµ = 0.2
‚îî @ Turing.Inference /home/cameron/.julia/packages/Turing/GMBTf/src/inference/hmc.jl:629
[32mSampling: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| Time: 0:02:48[39m





Object of type Chains, with data of type 9000√ó17√ó1 Array{Float64,3}

Iterations        = 1:9000
Thinning interval = 1
Chains            = 1
Samples per chain = 9000
internals         = acceptance_rate, hamiltonian_energy, hamiltonian_energy_error, is_accept, log_density, lp, max_hamiltonian_energy_error, n_steps, nom_step_size, numerical_error, step_size, tree_depth
parameters        = Œ±, Œ≤, Œ≥, Œ¥, œÉ

2-element Array{ChainDataFrame,1}

Summary Statistics
  parameters    mean     std  naive_se    mcse        ess   r_hat
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
           Œ±  1.4999  0.0060    0.0001  0.0001  2341.1779  0.9999
           Œ≤  0.9999  0.0037    0.0000  0.0001  2440.6968  0.9999
           Œ≥  3.0001  0.0047    0.0000  0.0001  4070.6419  1.0003
           Œ¥  1.0001  0.0032    0.0000  0.0001  2324.4733  0.9999
           œÉ  0.0151  0.0011    0.0000  0.0000  4591.2728  0.9999

Quantiles
  parameters    2.5%   25.0%   50.0%   75.0%   97.5%
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
           Œ±  1.4881  1.4960  1.4998  1.5038  1.5118
           Œ≤  0.9925  0.9975  0.9999  1.0024  1.0074
           Œ≥  2.9911  2.9970  3.0000  3.0032  3.0095
           Œ¥  0.9937  0.9979  1.0001  1.0022  1.0066
           œÉ  0.0131  0.0143  0.0150  0.0158  0.0173
</code></pre></div></div>

<h2 id="scaling-to-large-models-adjoint-sensitivities">Scaling to Large Models: Adjoint Sensitivities</h2>

<p>DifferentialEquations.jl‚Äôs efficiency for large stiff models has been shown in multiple <a href="https://github.com/SciML/DiffEqBenchmarks.jl">benchmarks</a>. To learn more about how to optimize solving performance for stiff problems you can take a look at the <a href="https://docs.sciml.ai/latest/tutorials/advanced_ode_example/">docs</a>.</p>

<p><a href="https://docs.sciml.ai/latest/analysis/sensitivity/">Sensitivity analysis</a>, or automatic differentiation (AD) of the solver, is provided by the DiffEq suite. The model sensitivities are the derivatives of the solution \(u(t)\) with respect to the parameters. Specifically, the local sensitivity of the solution to a parameter is defined by how much the solution would change by changes in the parameter. Sensitivity analysis provides a cheap way to calculate the gradient of the solution which can be used in parameter estimation and other optimization tasks.</p>

<p>The AD ecosystem in Julia allows you to switch between forward mode, reverse mode, source to source and other choices of AD and have it work with any Julia code. For a user to make use of this within <a href="https://sciml.ai">SciML</a>, <a href="https://docs.sciml.ai/latest/analysis/sensitivity/#High-Level-Interface:-sensealg-1">high level interactions in <code class="language-plaintext highlighter-rouge">solve</code></a> automatically plug into those AD systems to allow for choosing advanced sensitivity analysis (derivative calculation) <a href="https://docs.sciml.ai/latest/analysis/sensitivity/#Sensitivity-Algorithms-1">methods</a>.</p>

<p>More theoretical details on these methods can be found at: https://docs.sciml.ai/latest/extras/sensitivity_math/.</p>

<p>While these sensitivity analysis methods may seem complicated (and they are!), using them is dead simple. Here is a version of the Lotka-Volterra model with adjoints enabled.</p>

<p>All we had to do is switch the AD backend to one of the adjoint-compatible backends (ReverseDiff, Tracker, or Zygote) and boom the system takes over and we‚Äôre using adjoint methods! Notice that on this model adjoints are slower. This is because adjoints have a higher overhead on small parameter models and we suggest only using these methods for models with around 100 parameters or more. For more details, see https://arxiv.org/abs/1812.01892.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Turing</span><span class="o">.</span><span class="n">setadbackend</span><span class="x">(</span><span class="o">:</span><span class="n">zygote</span><span class="x">)</span>
<span class="nd">@model</span> <span class="k">function</span><span class="nf"> fitlv</span><span class="x">(</span><span class="n">data</span><span class="x">)</span>
    <span class="n">œÉ</span> <span class="o">~</span> <span class="n">InverseGamma</span><span class="x">(</span><span class="mi">2</span><span class="x">,</span> <span class="mi">3</span><span class="x">)</span>
    <span class="n">Œ±</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.5</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mf">0.5</span><span class="x">,</span><span class="mf">2.5</span><span class="x">)</span>
    <span class="n">Œ≤</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.2</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">0</span><span class="x">,</span><span class="mi">2</span><span class="x">)</span>
    <span class="n">Œ≥</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">3.0</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">1</span><span class="x">,</span><span class="mi">4</span><span class="x">)</span>
    <span class="n">Œ¥</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.0</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">0</span><span class="x">,</span><span class="mi">2</span><span class="x">)</span>
    <span class="n">p</span> <span class="o">=</span> <span class="x">[</span><span class="n">Œ±</span><span class="x">,</span><span class="n">Œ≤</span><span class="x">,</span><span class="n">Œ≥</span><span class="x">,</span><span class="n">Œ¥</span><span class="x">]</span>
    <span class="n">prob</span> <span class="o">=</span> <span class="n">ODEProblem</span><span class="x">(</span><span class="n">lotka_volterra</span><span class="x">,</span><span class="n">u0</span><span class="x">,(</span><span class="mf">0.0</span><span class="x">,</span><span class="mf">10.0</span><span class="x">),</span><span class="n">p</span><span class="x">)</span>
    <span class="n">predicted</span> <span class="o">=</span> <span class="n">solve</span><span class="x">(</span><span class="n">prob</span><span class="x">,</span><span class="n">saveat</span><span class="o">=</span><span class="mf">0.1</span><span class="x">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="x">(</span><span class="n">predicted</span><span class="x">)</span>
        <span class="n">data</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">i</span><span class="x">]</span> <span class="o">~</span> <span class="n">MvNormal</span><span class="x">(</span><span class="n">predicted</span><span class="x">[</span><span class="n">i</span><span class="x">],</span> <span class="n">œÉ</span><span class="x">)</span>
    <span class="k">end</span>
<span class="k">end</span><span class="x">;</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">fitlv</span><span class="x">(</span><span class="n">odedata</span><span class="x">)</span>
<span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="x">(</span><span class="n">model</span><span class="x">,</span> <span class="n">NUTS</span><span class="x">(</span><span class="o">.</span><span class="mi">65</span><span class="x">),</span><span class="mi">1000</span><span class="x">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚îå Info: Found initial step size
‚îÇ   œµ = 0.2
‚îî @ Turing.Inference /home/cameron/.julia/packages/Turing/GMBTf/src/inference/hmc.jl:629
[32mSampling: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| Time: 0:10:42[39m





Object of type Chains, with data of type 500√ó17√ó1 Array{Float64,3}

Iterations        = 1:500
Thinning interval = 1
Chains            = 1
Samples per chain = 500
internals         = acceptance_rate, hamiltonian_energy, hamiltonian_energy_error, is_accept, log_density, lp, max_hamiltonian_energy_error, n_steps, nom_step_size, numerical_error, step_size, tree_depth
parameters        = Œ±, Œ≤, Œ≥, Œ¥, œÉ

2-element Array{ChainDataFrame,1}

Summary Statistics
  parameters    mean     std  naive_se    mcse       ess   r_hat
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
           Œ±  1.4997  0.0052    0.0002  0.0003  201.5277  1.0046
           Œ≤  0.9999  0.0033    0.0001  0.0001  219.1974  1.0027
           Œ≥  3.0003  0.0047    0.0002  0.0003  290.3332  1.0014
           Œ¥  1.0002  0.0029    0.0001  0.0002  210.0807  1.0046
           œÉ  0.0151  0.0010    0.0000  0.0001  246.6502  1.0017

Quantiles
  parameters    2.5%   25.0%   50.0%   75.0%   97.5%
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
           Œ±  1.4892  1.4962  1.5002  1.5030  1.5108
           Œ≤  0.9934  0.9978  1.0000  1.0019  1.0066
           Œ≥  2.9910  2.9971  3.0002  3.0039  3.0084
           Œ¥  0.9943  0.9983  1.0000  1.0021  1.0060
           œÉ  0.0131  0.0143  0.0151  0.0158  0.0172
</code></pre></div></div>

<p>Now we can exercise control of the sensitivity analysis method that is used by using the <code class="language-plaintext highlighter-rouge">sensealg</code> keyword argument. Let‚Äôs choose the <code class="language-plaintext highlighter-rouge">InterpolatingAdjoint</code> from the available AD <a href="https://docs.sciml.ai/latest/analysis/sensitivity/#Sensitivity-Algorithms-1">methods</a> and enable a compiled ReverseDiff vector-Jacobian product:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@model</span> <span class="k">function</span><span class="nf"> fitlv</span><span class="x">(</span><span class="n">data</span><span class="x">)</span>
    <span class="n">œÉ</span> <span class="o">~</span> <span class="n">InverseGamma</span><span class="x">(</span><span class="mi">2</span><span class="x">,</span> <span class="mi">3</span><span class="x">)</span>
    <span class="n">Œ±</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.5</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mf">0.5</span><span class="x">,</span><span class="mf">2.5</span><span class="x">)</span>
    <span class="n">Œ≤</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.2</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">0</span><span class="x">,</span><span class="mi">2</span><span class="x">)</span>
    <span class="n">Œ≥</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">3.0</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">1</span><span class="x">,</span><span class="mi">4</span><span class="x">)</span>
    <span class="n">Œ¥</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.0</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">0</span><span class="x">,</span><span class="mi">2</span><span class="x">)</span>
    <span class="n">p</span> <span class="o">=</span> <span class="x">[</span><span class="n">Œ±</span><span class="x">,</span><span class="n">Œ≤</span><span class="x">,</span><span class="n">Œ≥</span><span class="x">,</span><span class="n">Œ¥</span><span class="x">]</span>
    <span class="n">prob</span> <span class="o">=</span> <span class="n">ODEProblem</span><span class="x">(</span><span class="n">lotka_volterra</span><span class="x">,</span><span class="n">u0</span><span class="x">,(</span><span class="mf">0.0</span><span class="x">,</span><span class="mf">10.0</span><span class="x">),</span><span class="n">p</span><span class="x">)</span>
    <span class="n">predicted</span> <span class="o">=</span> <span class="n">solve</span><span class="x">(</span><span class="n">prob</span><span class="x">,</span><span class="n">saveat</span><span class="o">=</span><span class="mf">0.1</span><span class="x">,</span><span class="n">sensealg</span><span class="o">=</span><span class="n">InterpolatingAdjoint</span><span class="x">(</span><span class="n">autojacvec</span><span class="o">=</span><span class="n">ReverseDiffVJP</span><span class="x">(</span><span class="nb">true</span><span class="x">)))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="x">(</span><span class="n">predicted</span><span class="x">)</span>
        <span class="n">data</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">i</span><span class="x">]</span> <span class="o">~</span> <span class="n">MvNormal</span><span class="x">(</span><span class="n">predicted</span><span class="x">[</span><span class="n">i</span><span class="x">],</span> <span class="n">œÉ</span><span class="x">)</span>
    <span class="k">end</span>
<span class="k">end</span><span class="x">;</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">fitlv</span><span class="x">(</span><span class="n">odedata</span><span class="x">)</span>
<span class="nd">@time</span> <span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="x">(</span><span class="n">model</span><span class="x">,</span> <span class="n">NUTS</span><span class="x">(</span><span class="o">.</span><span class="mi">65</span><span class="x">),</span><span class="mi">1000</span><span class="x">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚îå Info: Found initial step size
‚îÇ   œµ = 0.2
‚îî @ Turing.Inference /home/cameron/.julia/packages/Turing/GMBTf/src/inference/hmc.jl:629
[32mSampling:  11%|‚ñà‚ñà‚ñà‚ñà‚ñç                                    |  ETA: 0:06:27[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  13%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñç                                   |  ETA: 0:05:58[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  15%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñé                                  |  ETA: 0:05:27[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  21%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå                                |  ETA: 0:04:20[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  23%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñé                               |  ETA: 0:04:03[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  24%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                               |  ETA: 0:03:48[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  28%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñå                             |  ETA: 0:03:27[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  29%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä                             |  ETA: 0:03:24[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  29%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                             |  ETA: 0:03:20[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  36%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                          |  ETA: 0:02:45[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  37%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè                         |  ETA: 0:02:44[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  39%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà                         |  ETA: 0:02:36[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  46%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñâ                      |  ETA: 0:02:08[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  48%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñä                     |  ETA: 0:02:03[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  49%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè                    |  ETA: 0:02:01[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:  50%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñé                    |  ETA: 0:02:00[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| Time: 0:03:32[39m


225.663919 seconds (1.41 G allocations: 66.216 GiB, 5.25% gc time)





Object of type Chains, with data of type 500√ó17√ó1 Array{Float64,3}

Iterations        = 1:500
Thinning interval = 1
Chains            = 1
Samples per chain = 500
internals         = acceptance_rate, hamiltonian_energy, hamiltonian_energy_error, is_accept, log_density, lp, max_hamiltonian_energy_error, n_steps, nom_step_size, numerical_error, step_size, tree_depth
parameters        = Œ±, Œ≤, Œ≥, Œ¥, œÉ

2-element Array{ChainDataFrame,1}

Summary Statistics
  parameters    mean     std  naive_se    mcse       ess   r_hat
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
           Œ±  0.9122  0.2810    0.0126  0.0152  211.4497  0.9992
           Œ≤  1.8499  0.1141    0.0051  0.0055  302.7650  1.0018
           Œ≥  2.5879  0.3299    0.0148  0.0228  307.5110  0.9997
           Œ¥  0.1259  0.0221    0.0010  0.0007  219.5371  1.0006
           œÉ  0.8746  0.0437    0.0020  0.0017  342.6660  1.0008

Quantiles
  parameters    2.5%   25.0%   50.0%   75.0%   97.5%
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
           Œ±  0.5060  0.6920  0.8932  1.0874  1.5467
           Œ≤  1.5810  1.7796  1.8709  1.9437  1.9873
           Œ≥  1.9519  2.3707  2.5999  2.8158  3.1966
           Œ¥  0.0843  0.1103  0.1245  0.1410  0.1704
           œÉ  0.7984  0.8444  0.8722  0.9044  0.9651
</code></pre></div></div>

<p>For more examples of adjoint usage on large parameter models, consult the <a href="https://diffeqflux.sciml.ai/dev/">DiffEqFlux documentation</a></p>

<h2 id="including-process-noise-estimation-of-stochastic-differential-equations">Including Process Noise: Estimation of Stochastic Differential Equations</h2>

<p>This can be easily extended to Stochastic Differential Equations as well.</p>

<p>Let‚Äôs create the Lotka Volterra equation with some noise and try out estimating it with the same framework we have set up before.</p>

<p>Our equations now become:</p>

\[dx = (\alpha - \beta y)xdt + \phi_1 xdW_1\]

\[dy = (\delta x - \gamma)ydt + \phi_2 ydW_2\]

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="nf"> lotka_volterra_noise</span><span class="x">(</span><span class="n">du</span><span class="x">,</span><span class="n">u</span><span class="x">,</span><span class="n">p</span><span class="x">,</span><span class="n">t</span><span class="x">)</span>
    <span class="n">du</span><span class="x">[</span><span class="mi">1</span><span class="x">]</span> <span class="o">=</span> <span class="n">p</span><span class="x">[</span><span class="mi">5</span><span class="x">]</span><span class="o">*</span><span class="n">u</span><span class="x">[</span><span class="mi">1</span><span class="x">]</span>
    <span class="n">du</span><span class="x">[</span><span class="mi">2</span><span class="x">]</span> <span class="o">=</span> <span class="n">p</span><span class="x">[</span><span class="mi">6</span><span class="x">]</span><span class="o">*</span><span class="n">u</span><span class="x">[</span><span class="mi">2</span><span class="x">]</span>
<span class="k">end</span>
<span class="n">p</span> <span class="o">=</span> <span class="x">[</span><span class="mf">1.5</span><span class="x">,</span> <span class="mf">1.0</span><span class="x">,</span> <span class="mf">3.0</span><span class="x">,</span> <span class="mf">1.0</span><span class="x">,</span> <span class="mf">0.3</span><span class="x">,</span> <span class="mf">0.3</span><span class="x">]</span>
<span class="n">prob</span> <span class="o">=</span> <span class="n">SDEProblem</span><span class="x">(</span><span class="n">lotka_volterra</span><span class="x">,</span><span class="n">lotka_volterra_noise</span><span class="x">,</span><span class="n">u0</span><span class="x">,(</span><span class="mf">0.0</span><span class="x">,</span><span class="mf">10.0</span><span class="x">),</span><span class="n">p</span><span class="x">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[36mSDEProblem[0m with uType [36mArray{Float64,1}[0m and tType [36mFloat64[0m. In-place: [36mtrue[0m
timespan: (0.0, 10.0)
u0: [1.0, 1.0]
</code></pre></div></div>

<p>Solving it repeatedly confirms the randomness of the solution</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sol</span> <span class="o">=</span> <span class="n">solve</span><span class="x">(</span><span class="n">prob</span><span class="x">,</span><span class="n">saveat</span><span class="o">=</span><span class="mf">0.01</span><span class="x">)</span>
<span class="n">p1</span> <span class="o">=</span> <span class="n">plot</span><span class="x">(</span><span class="n">sol</span><span class="x">)</span>
<span class="n">sol</span> <span class="o">=</span> <span class="n">solve</span><span class="x">(</span><span class="n">prob</span><span class="x">,</span><span class="n">saveat</span><span class="o">=</span><span class="mf">0.01</span><span class="x">)</span>
<span class="n">p2</span> <span class="o">=</span> <span class="n">plot</span><span class="x">(</span><span class="n">sol</span><span class="x">)</span>
<span class="n">sol</span> <span class="o">=</span> <span class="n">solve</span><span class="x">(</span><span class="n">prob</span><span class="x">,</span><span class="n">saveat</span><span class="o">=</span><span class="mf">0.01</span><span class="x">)</span>
<span class="n">p3</span> <span class="o">=</span> <span class="n">plot</span><span class="x">(</span><span class="n">sol</span><span class="x">)</span>
<span class="n">plot</span><span class="x">(</span><span class="n">p1</span><span class="x">,</span><span class="n">p2</span><span class="x">,</span><span class="n">p3</span><span class="x">)</span>
</code></pre></div></div>

<p><img src="../10_BayesianDiffEq_files/10_BayesianDiffEq_23_0.svg" alt="svg" /></p>

<p>With the <code class="language-plaintext highlighter-rouge">MonteCarloSummary</code> it is easy to summarize the results from multiple runs through the <code class="language-plaintext highlighter-rouge">EnsembleProblem</code> interface, here we run the problem for 1000 <code class="language-plaintext highlighter-rouge">trajectories</code> and visualize the summary:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sol</span> <span class="o">=</span> <span class="n">solve</span><span class="x">(</span><span class="n">EnsembleProblem</span><span class="x">(</span><span class="n">prob</span><span class="x">),</span><span class="n">SRIW1</span><span class="x">(),</span><span class="n">saveat</span><span class="o">=</span><span class="mf">0.1</span><span class="x">,</span><span class="n">trajectories</span><span class="o">=</span><span class="mi">500</span><span class="x">)</span>
<span class="n">summ</span> <span class="o">=</span> <span class="n">MonteCarloSummary</span><span class="x">(</span><span class="n">sol</span><span class="x">)</span>
<span class="n">plot</span><span class="x">(</span><span class="n">summ</span><span class="x">)</span>
</code></pre></div></div>

<p><img src="../10_BayesianDiffEq_files/10_BayesianDiffEq_25_0.svg" alt="svg" /></p>

<p>Get data from the means to fit:</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">DiffEqBase</span><span class="o">.</span><span class="n">EnsembleAnalysis</span>
<span class="n">averagedata</span> <span class="o">=</span> <span class="kt">Array</span><span class="x">(</span><span class="n">timeseries_steps_mean</span><span class="x">(</span><span class="n">sol</span><span class="x">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2√ó101 Array{Float64,2}:
 1.0  1.04218  1.05885  1.03187  0.967422  ‚Ä¶  0.190811  0.197071  0.203714
 1.0  1.22803  1.5283   1.89036  2.30967      1.16424   1.11006   1.07984
</code></pre></div></div>

<p>Now fit the means with Turing.</p>

<p>We will utilize multithreading with the <a href="https://docs.sciml.ai/stable/tutorials/sde_example/#Ensemble-Simulations-1"><code class="language-plaintext highlighter-rouge">EnsembleProblem</code></a> interface to speed up the SDE parameter estimation.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Threads</span><span class="o">.</span><span class="n">nthreads</span><span class="x">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>16
</code></pre></div></div>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Turing</span><span class="o">.</span><span class="n">setadbackend</span><span class="x">(</span><span class="o">:</span><span class="n">forwarddiff</span><span class="x">)</span>

<span class="nd">@model</span> <span class="k">function</span><span class="nf"> fitlv</span><span class="x">(</span><span class="n">data</span><span class="x">)</span>
    <span class="n">œÉ</span> <span class="o">~</span> <span class="n">InverseGamma</span><span class="x">(</span><span class="mi">2</span><span class="x">,</span> <span class="mi">3</span><span class="x">)</span>
    <span class="n">Œ±</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.5</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mf">0.5</span><span class="x">,</span><span class="mf">2.5</span><span class="x">)</span>
    <span class="n">Œ≤</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.2</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">0</span><span class="x">,</span><span class="mi">2</span><span class="x">)</span>
    <span class="n">Œ≥</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">3.0</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">1</span><span class="x">,</span><span class="mi">4</span><span class="x">)</span>
    <span class="n">Œ¥</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.0</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mi">0</span><span class="x">,</span><span class="mi">2</span><span class="x">)</span>
    <span class="n">œï1</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.2</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mf">0.1</span><span class="x">,</span><span class="mi">1</span><span class="x">)</span>
    <span class="n">œï2</span> <span class="o">~</span> <span class="n">truncated</span><span class="x">(</span><span class="n">Normal</span><span class="x">(</span><span class="mf">1.2</span><span class="x">,</span><span class="mf">0.5</span><span class="x">),</span><span class="mf">0.1</span><span class="x">,</span><span class="mi">1</span><span class="x">)</span>

    <span class="n">p</span> <span class="o">=</span> <span class="x">[</span><span class="n">Œ±</span><span class="x">,</span><span class="n">Œ≤</span><span class="x">,</span><span class="n">Œ≥</span><span class="x">,</span><span class="n">Œ¥</span><span class="x">,</span><span class="n">œï1</span><span class="x">,</span><span class="n">œï2</span><span class="x">]</span>
    <span class="n">prob</span> <span class="o">=</span> <span class="n">SDEProblem</span><span class="x">(</span><span class="n">lotka_volterra</span><span class="x">,</span><span class="n">lotka_volterra_noise</span><span class="x">,</span><span class="n">u0</span><span class="x">,(</span><span class="mf">0.0</span><span class="x">,</span><span class="mf">10.0</span><span class="x">),</span><span class="n">p</span><span class="x">)</span>
    <span class="n">ensemble_predicted</span> <span class="o">=</span> <span class="n">solve</span><span class="x">(</span><span class="n">EnsembleProblem</span><span class="x">(</span><span class="n">prob</span><span class="x">),</span><span class="n">SRIW1</span><span class="x">(),</span><span class="n">saveat</span><span class="o">=</span><span class="mf">0.1</span><span class="x">,</span><span class="n">trajectories</span><span class="o">=</span><span class="mi">500</span><span class="x">)</span>
    <span class="n">predicted_means</span> <span class="o">=</span> <span class="n">timeseries_steps_mean</span><span class="x">(</span><span class="n">ensemble_predicted</span><span class="x">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="x">(</span><span class="n">predicted_means</span><span class="x">)</span>
        <span class="n">data</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">i</span><span class="x">]</span> <span class="o">~</span> <span class="n">MvNormal</span><span class="x">(</span><span class="n">predicted_means</span><span class="x">[</span><span class="n">i</span><span class="x">],</span> <span class="n">œÉ</span><span class="x">)</span>
    <span class="k">end</span>
<span class="k">end</span><span class="x">;</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">fitlv</span><span class="x">(</span><span class="n">averagedata</span><span class="x">)</span>
<span class="n">chain</span> <span class="o">=</span> <span class="n">sample</span><span class="x">(</span><span class="n">model</span><span class="x">,</span> <span class="n">NUTS</span><span class="x">(</span><span class="o">.</span><span class="mi">65</span><span class="x">),</span><span class="mi">500</span><span class="x">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚îå Info: Found initial step size
‚îÇ   œµ = 0.2
‚îî @ Turing.Inference /home/cameron/.julia/packages/Turing/GMBTf/src/inference/hmc.jl:629
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling:   0%|‚ñè                                        |  ETA: 0:03:49[39m‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
‚îå Warning: The current proposal will be rejected due to numerical error(s).
‚îÇ   isfinite.((Œ∏, r, ‚ÑìœÄ, ‚ÑìŒ∫)) = (true, false, false, false)
‚îî @ AdvancedHMC /home/cameron/.julia/packages/AdvancedHMC/WJCQA/src/hamiltonian.jl:47
[32mSampling: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| Time: 2:33:35[39m





Object of type Chains, with data of type 250√ó19√ó1 Array{Float64,3}

Iterations        = 1:250
Thinning interval = 1
Chains            = 1
Samples per chain = 250
internals         = acceptance_rate, hamiltonian_energy, hamiltonian_energy_error, is_accept, log_density, lp, max_hamiltonian_energy_error, n_steps, nom_step_size, numerical_error, step_size, tree_depth
parameters        = Œ±, Œ≤, Œ≥, Œ¥, œÉ, œï1, œï2

2-element Array{ChainDataFrame,1}

Summary Statistics
  parameters    mean     std  naive_se    mcse     ess   r_hat
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
           Œ±  1.6255  0.0000    0.0000  0.0000  2.0325  2.5501
           Œ≤  1.1163  0.0000    0.0000  0.0000  2.0325     Inf
           Œ≥  3.2056  0.0000    0.0000  0.0000  2.0325  0.9960
           Œ¥  0.9268  0.0000    0.0000  0.0000  2.0325  2.9880
           œÉ  0.0669  0.0000    0.0000  0.0000  2.0325  1.1011
          œï1  0.2329  0.0000    0.0000  0.0000  2.0325  3.2549
          œï2  0.2531  0.0000    0.0000  0.0000  2.0325  0.9960

Quantiles
  parameters    2.5%   25.0%   50.0%   75.0%   97.5%
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
           Œ±  1.6255  1.6255  1.6255  1.6255  1.6255
           Œ≤  1.1163  1.1163  1.1163  1.1163  1.1163
           Œ≥  3.2056  3.2056  3.2056  3.2056  3.2056
           Œ¥  0.9268  0.9268  0.9268  0.9268  0.9268
           œÉ  0.0669  0.0669  0.0669  0.0669  0.0669
          œï1  0.2329  0.2329  0.2329  0.2329  0.2329
          œï2  0.2531  0.2531  0.2531  0.2531  0.2531
</code></pre></div></div>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>
:ET