I"‹Š<p><a id="Index"></a></p>

<p><a id="Index-1"></a></p>

<h2 id="index">Index</h2>

<ul>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.AbstractProposal"><code class="language-plaintext highlighter-rouge">AdvancedHMC.AbstractProposal</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.AbstractTrajectory"><code class="language-plaintext highlighter-rouge">AdvancedHMC.AbstractTrajectory</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.AbstractTrajectorySampler"><code class="language-plaintext highlighter-rouge">AdvancedHMC.AbstractTrajectorySampler</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.BinaryTree"><code class="language-plaintext highlighter-rouge">AdvancedHMC.BinaryTree</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.MultinomialTS-Tuple{Random.AbstractRNG,AdvancedHMC.PhasePoint}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.MultinomialTS</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.MultinomialTS-Tuple{MultinomialTS,AbstractFloat,AdvancedHMC.PhasePoint}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.MultinomialTS</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.MultinomialTS"><code class="language-plaintext highlighter-rouge">AdvancedHMC.MultinomialTS</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.NUTS-Union{Tuple{I}, Tuple{C}, Tuple{S}, Tuple{F}, Tuple{I}, Tuple{I,Int64}, Tuple{I,Int64,F}} where C&lt;:AdvancedHMC.AbstractTerminationCriterion where S&lt;:AdvancedHMC.AbstractTrajectorySampler where F&lt;:AbstractFloat where I&lt;:AdvancedHMC.AbstractIntegrator"><code class="language-plaintext highlighter-rouge">AdvancedHMC.NUTS</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.NUTS"><code class="language-plaintext highlighter-rouge">AdvancedHMC.NUTS</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.NUTS-Tuple"><code class="language-plaintext highlighter-rouge">AdvancedHMC.NUTS</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.SliceTS-Tuple{SliceTS,AbstractFloat,AdvancedHMC.PhasePoint}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.SliceTS</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.SliceTS"><code class="language-plaintext highlighter-rouge">AdvancedHMC.SliceTS</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.SliceTS-Tuple{Random.AbstractRNG,AdvancedHMC.PhasePoint}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.SliceTS</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.Termination-Union{Tuple{F}, Tuple{MultinomialTS,AdvancedHMC.NUTS,F,F}} where F&lt;:AbstractFloat"><code class="language-plaintext highlighter-rouge">AdvancedHMC.Termination</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.Termination-Union{Tuple{F}, Tuple{SliceTS,AdvancedHMC.NUTS,F,F}} where F&lt;:AbstractFloat"><code class="language-plaintext highlighter-rouge">AdvancedHMC.Termination</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.Termination"><code class="language-plaintext highlighter-rouge">AdvancedHMC.Termination</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.Transition"><code class="language-plaintext highlighter-rouge">AdvancedHMC.Transition</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.A-Tuple{Any,Any,Any}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.A</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.build_tree-Union{Tuple{C}, Tuple{S}, Tuple{F}, Tuple{I}, Tuple{Random.AbstractRNG,AdvancedHMC.NUTS{S,C,I,F},Hamiltonian,AdvancedHMC.PhasePoint,AdvancedHMC.AbstractTrajectorySampler,Int64,Int64,AbstractFloat}} where C&lt;:AdvancedHMC.AbstractTerminationCriterion where S&lt;:AdvancedHMC.AbstractTrajectorySampler where F&lt;:AbstractFloat where I&lt;:AdvancedHMC.AbstractIntegrator"><code class="language-plaintext highlighter-rouge">AdvancedHMC.build_tree</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.combine-Tuple{AdvancedHMC.BinaryTree,AdvancedHMC.BinaryTree}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.combine</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.find_good_stepsize-Union{Tuple{T}, Tuple{Random.AbstractRNG,Hamiltonian,AbstractArray{T,1}}} where T&lt;:Real"><code class="language-plaintext highlighter-rouge">AdvancedHMC.find_good_stepsize</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.isterminated-Tuple{Hamiltonian,AdvancedHMC.BinaryTree{#s48} where #s48&lt;:GeneralisedNoUTurn}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.isterminated</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.isterminated-Tuple{Hamiltonian,AdvancedHMC.BinaryTree{#s48} where #s48&lt;:ClassicNoUTurn}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.isterminated</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.maxabs-Tuple{Any,Any}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.maxabs</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.mh_accept_ratio-Union{Tuple{T}, Tuple{Random.AbstractRNG,T,T}} where T&lt;:AbstractFloat"><code class="language-plaintext highlighter-rouge">AdvancedHMC.mh_accept_ratio</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.nom_step_size-Tuple{AdvancedHMC.AbstractIntegrator}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.nom_step_size</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.pm_next!-Tuple{Any,NamedTuple}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.pm_next!</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.simple_pm_next!-Tuple{Any,NamedTuple}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.simple_pm_next!</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.step_size"><code class="language-plaintext highlighter-rouge">AdvancedHMC.step_size</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.temper-Tuple{TemperedLeapfrog,Any,NamedTuple{(:i, :is_half),#s48} where #s48&lt;:Tuple{Integer,Bool},Int64}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.temper</code></a></li>
  <li><a href="/dev/docs/library/advancedhmc/#AdvancedHMC.transition-Tuple{AdvancedHMC.AbstractTrajectory,Hamiltonian,AdvancedHMC.PhasePoint}"><code class="language-plaintext highlighter-rouge">AdvancedHMC.transition</code></a></li>
</ul>

<p><a id="Functions"></a></p>

<p><a id="Functions-1"></a></p>

<h2 id="functions">Functions</h2>

<p><a id="AdvancedHMC.A-Tuple{Any,Any,Any}" href="#AdvancedHMC.A-Tuple{Any,Any,Any}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.A</code></strong> â€” <em>Method</em>.</p>

<p>A single Hamiltonian integration step.</p>

<p>NOTE: this function is intended to be used in <code class="language-plaintext highlighter-rouge">find_good_stepsize</code> only.</p>

<p><a id="AdvancedHMC.build_tree-Union{Tuple{C}, Tuple{S}, Tuple{F}, Tuple{I}, Tuple{Random.AbstractRNG,AdvancedHMC.NUTS{S,C,I,F},Hamiltonian,AdvancedHMC.PhasePoint,AdvancedHMC.AbstractTrajectorySampler,Int64,Int64,AbstractFloat}} where C&lt;:AdvancedHMC.AbstractTerminationCriterion where S&lt;:AdvancedHMC.AbstractTrajectorySampler where F&lt;:AbstractFloat where I&lt;:AdvancedHMC.AbstractIntegrator" href="#AdvancedHMC.build_tree-Union{Tuple{C}, Tuple{S}, Tuple{F}, Tuple{I}, Tuple{Random.AbstractRNG,AdvancedHMC.NUTS{S,C,I,F},Hamiltonian,AdvancedHMC.PhasePoint,AdvancedHMC.AbstractTrajectorySampler,Int64,Int64,AbstractFloat}} where C&lt;:AdvancedHMC.AbstractTerminationCriterion where S&lt;:AdvancedHMC.AbstractTrajectorySampler where F&lt;:AbstractFloat where I&lt;:AdvancedHMC.AbstractIntegrator">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.build_tree</code></strong> â€” <em>Method</em>.</p>

<p>Recursivly build a tree for a given depth <code class="language-plaintext highlighter-rouge">j</code>.</p>

<p><a id="AdvancedHMC.combine-Tuple{AdvancedHMC.BinaryTree,AdvancedHMC.BinaryTree}" href="#AdvancedHMC.combine-Tuple{AdvancedHMC.BinaryTree,AdvancedHMC.BinaryTree}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.combine</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">combine</span><span class="x">(</span><span class="n">treeleft</span><span class="o">::</span><span class="n">BinaryTree</span><span class="x">,</span> <span class="n">treeright</span><span class="o">::</span><span class="n">BinaryTree</span><span class="x">)</span>
</code></pre></div></div>

<p>Merge a left tree <code class="language-plaintext highlighter-rouge">treeleft</code> and a right tree <code class="language-plaintext highlighter-rouge">treeright</code> under given Hamiltonian <code class="language-plaintext highlighter-rouge">h</code>, then draw a new candidate sample and update related statistics for the resulting tree.</p>

<p><a id="AdvancedHMC.find_good_stepsize-Union{Tuple{T}, Tuple{Random.AbstractRNG,Hamiltonian,AbstractArray{T,1}}} where T&lt;:Real" href="#AdvancedHMC.find_good_stepsize-Union{Tuple{T}, Tuple{Random.AbstractRNG,Hamiltonian,AbstractArray{T,1}}} where T&lt;:Real">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.find_good_stepsize</code></strong> â€” <em>Method</em>.</p>

<p>Find a good initial leap-frog step-size via heuristic search.</p>

<p><a id="AdvancedHMC.isterminated-Tuple{Hamiltonian,AdvancedHMC.BinaryTree{#s48} where #s48&lt;:ClassicNoUTurn}" href="#AdvancedHMC.isterminated-Tuple{Hamiltonian,AdvancedHMC.BinaryTree{#s48} where #s48&lt;:ClassicNoUTurn}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.isterminated</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">isterminated</span><span class="x">(</span><span class="n">h</span><span class="o">::</span><span class="n">Hamiltonian</span><span class="x">,</span> <span class="n">t</span><span class="o">::</span><span class="n">BinaryTree</span><span class="x">{</span><span class="o">&lt;:</span><span class="n">ClassicNoUTurn</span><span class="x">})</span>
</code></pre></div></div>

<p>Detect U turn for two phase points (<code class="language-plaintext highlighter-rouge">zleft</code> and <code class="language-plaintext highlighter-rouge">zright</code>) under given Hamiltonian <code class="language-plaintext highlighter-rouge">h</code> using the (original) no-U-turn cirterion.</p>

<p>Ref: https://arxiv.org/abs/1111.4246, https://arxiv.org/abs/1701.02434</p>

<p><a id="AdvancedHMC.isterminated-Tuple{Hamiltonian,AdvancedHMC.BinaryTree{#s48} where #s48&lt;:GeneralisedNoUTurn}" href="#AdvancedHMC.isterminated-Tuple{Hamiltonian,AdvancedHMC.BinaryTree{#s48} where #s48&lt;:GeneralisedNoUTurn}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.isterminated</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">isterminated</span><span class="x">(</span><span class="n">h</span><span class="o">::</span><span class="n">Hamiltonian</span><span class="x">,</span> <span class="n">t</span><span class="o">::</span><span class="n">BinaryTree</span><span class="x">{</span><span class="o">&lt;:</span><span class="n">GeneralisedNoUTurn</span><span class="x">})</span>
</code></pre></div></div>

<p>Detect U turn for two phase points (<code class="language-plaintext highlighter-rouge">zleft</code> and <code class="language-plaintext highlighter-rouge">zright</code>) under given Hamiltonian <code class="language-plaintext highlighter-rouge">h</code> using the generalised no-U-turn criterion.</p>

<p>Ref: https://arxiv.org/abs/1701.02434</p>

<p><a id="AdvancedHMC.maxabs-Tuple{Any,Any}" href="#AdvancedHMC.maxabs-Tuple{Any,Any}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.maxabs</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">maxabs</span><span class="x">(</span><span class="n">a</span><span class="x">,</span> <span class="n">b</span><span class="x">)</span>
</code></pre></div></div>

<p>Return the value with the largest absolute value.</p>

<p><a id="AdvancedHMC.mh_accept_ratio-Union{Tuple{T}, Tuple{Random.AbstractRNG,T,T}} where T&lt;:AbstractFloat" href="#AdvancedHMC.mh_accept_ratio-Union{Tuple{T}, Tuple{Random.AbstractRNG,T,T}} where T&lt;:AbstractFloat">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.mh_accept_ratio</code></strong> â€” <em>Method</em>.</p>

<p>Perform MH acceptance based on energy, i.e. negative log probability.</p>

<p><a id="AdvancedHMC.nom_step_size-Tuple{AdvancedHMC.AbstractIntegrator}" href="#AdvancedHMC.nom_step_size-Tuple{AdvancedHMC.AbstractIntegrator}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.nom_step_size</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nom_step_size</span><span class="x">(</span><span class="o">::</span><span class="n">AbstractIntegrator</span><span class="x">)</span>
</code></pre></div></div>

<p>Get the nominal integration step size. The current integration step size may differ from this, for example if the step size is jittered. Nominal step size is usually used in adaptation.</p>

<p><a id="AdvancedHMC.pm_next!-Tuple{Any,NamedTuple}" href="#AdvancedHMC.pm_next!-Tuple{Any,NamedTuple}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.pm_next!</code></strong> â€” <em>Method</em>.</p>

<p>Progress meter update with all trajectory stats, iteration number and metric shown.</p>

<p><a id="AdvancedHMC.simple_pm_next!-Tuple{Any,NamedTuple}" href="#AdvancedHMC.simple_pm_next!-Tuple{Any,NamedTuple}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.simple_pm_next!</code></strong> â€” <em>Method</em>.</p>

<p>Simple progress meter update without any show values.</p>

<p><a id="AdvancedHMC.step_size" href="#AdvancedHMC.step_size">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.step_size</code></strong> â€” <em>Function</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">step_size</span><span class="x">(</span><span class="o">::</span><span class="n">AbstractIntegrator</span><span class="x">)</span>
</code></pre></div></div>

<p>Get the current integration step size.</p>

<p><a id="AdvancedHMC.temper-Tuple{TemperedLeapfrog,Any,NamedTuple{(:i, :is_half),#s48} where #s48&lt;:Tuple{Integer,Bool},Int64}" href="#AdvancedHMC.temper-Tuple{TemperedLeapfrog,Any,NamedTuple{(:i, :is_half),#s48} where #s48&lt;:Tuple{Integer,Bool},Int64}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.temper</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">temper</span><span class="x">(</span><span class="n">lf</span><span class="o">::</span><span class="n">TemperedLeapfrog</span><span class="x">,</span> <span class="n">r</span><span class="x">,</span> <span class="n">step</span><span class="o">::</span><span class="kt">NamedTuple</span><span class="x">{(</span><span class="o">:</span><span class="n">i</span><span class="x">,</span> <span class="o">:</span><span class="n">is_half</span><span class="x">),</span><span class="o">&lt;:</span><span class="kt">Tuple</span><span class="x">{</span><span class="kt">Integer</span><span class="x">,</span><span class="kt">Bool</span><span class="x">}},</span> <span class="n">n_steps</span><span class="o">::</span><span class="kt">Int</span><span class="x">)</span>
</code></pre></div></div>

<p>Tempering step. <code class="language-plaintext highlighter-rouge">step</code> is a named tuple with</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">i</code> being the current leapfrog iteration and</li>
  <li><code class="language-plaintext highlighter-rouge">is_half</code> indicating whether or not itâ€™s (the first) half momentum/tempering step</li>
</ul>

<p><a id="AdvancedHMC.transition-Tuple{AdvancedHMC.AbstractTrajectory,Hamiltonian,AdvancedHMC.PhasePoint}" href="#AdvancedHMC.transition-Tuple{AdvancedHMC.AbstractTrajectory,Hamiltonian,AdvancedHMC.PhasePoint}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.transition</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">transition</span><span class="x">(</span><span class="n">Ï„</span><span class="o">::</span><span class="n">AbstractTrajectory</span><span class="x">{</span><span class="n">I</span><span class="x">},</span> <span class="n">h</span><span class="o">::</span><span class="n">Hamiltonian</span><span class="x">,</span> <span class="n">z</span><span class="o">::</span><span class="n">PhasePoint</span><span class="x">)</span>
</code></pre></div></div>

<p>Make a MCMC transition from phase point <code class="language-plaintext highlighter-rouge">z</code> using the trajectory <code class="language-plaintext highlighter-rouge">Ï„</code> under Hamiltonian <code class="language-plaintext highlighter-rouge">h</code>.</p>

<p>NOTE: This is a RNG-implicit fallback function for <code class="language-plaintext highlighter-rouge">transition(GLOBAL_RNG, Ï„, h, z)</code></p>

<p><a id="StatsBase.sample-Union{Tuple{T}, Tuple{Union{Random.AbstractRNG, AbstractArray{#s147,1} where #s147&lt;:Random.AbstractRNG},Hamiltonian,AdvancedHMC.AbstractProposal,T,Int64}, Tuple{Union{Random.AbstractRNG, AbstractArray{#s148,1} where #s148&lt;:Random.AbstractRNG},Hamiltonian,AdvancedHMC.AbstractProposal,T,Int64,AdvancedHMC.Adaptation.AbstractAdaptor}, Tuple{Union{Random.AbstractRNG, AbstractArray{#s149,1} where #s149&lt;:Random.AbstractRNG},Hamiltonian,AdvancedHMC.AbstractProposal,T,Int64,AdvancedHMC.Adaptation.AbstractAdaptor,Int64}} where T&lt;:(Union{AbstractArray{#s146,1}, AbstractArray{#s146,2}} where #s146&lt;:AbstractFloat)" href="#StatsBase.sample-Union{Tuple{T}, Tuple{Union{Random.AbstractRNG, AbstractArray{#s147,1} where #s147&lt;:Random.AbstractRNG},Hamiltonian,AdvancedHMC.AbstractProposal,T,Int64}, Tuple{Union{Random.AbstractRNG, AbstractArray{#s148,1} where #s148&lt;:Random.AbstractRNG},Hamiltonian,AdvancedHMC.AbstractProposal,T,Int64,AdvancedHMC.Adaptation.AbstractAdaptor}, Tuple{Union{Random.AbstractRNG, AbstractArray{#s149,1} where #s149&lt;:Random.AbstractRNG},Hamiltonian,AdvancedHMC.AbstractProposal,T,Int64,AdvancedHMC.Adaptation.AbstractAdaptor,Int64}} where T&lt;:(Union{AbstractArray{#s146,1}, AbstractArray{#s146,2}} where #s146&lt;:AbstractFloat)">#</a>
<strong><code class="language-plaintext highlighter-rouge">StatsBase.sample</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sample</span><span class="x">(</span>
    <span class="n">rng</span><span class="o">::</span><span class="kt">AbstractRNG</span><span class="x">,</span>
    <span class="n">h</span><span class="o">::</span><span class="n">Hamiltonian</span><span class="x">,</span>
    <span class="n">Ï„</span><span class="o">::</span><span class="n">AbstractProposal</span><span class="x">,</span>
    <span class="n">Î¸</span><span class="o">::</span><span class="kt">AbstractVecOrMat</span><span class="x">{</span><span class="n">T</span><span class="x">},</span>
    <span class="n">n_samples</span><span class="o">::</span><span class="kt">Int</span><span class="x">,</span>
    <span class="n">adaptor</span><span class="o">::</span><span class="n">AbstractAdaptor</span><span class="o">=</span><span class="n">NoAdaptation</span><span class="x">(),</span>
    <span class="n">n_adapts</span><span class="o">::</span><span class="kt">Int</span><span class="o">=</span><span class="n">min</span><span class="x">(</span><span class="n">div</span><span class="x">(</span><span class="n">n_samples</span><span class="x">,</span> <span class="mi">10</span><span class="x">),</span> <span class="mi">1_000</span><span class="x">);</span>
    <span class="n">drop_warmup</span><span class="o">::</span><span class="kt">Bool</span><span class="o">=</span><span class="nb">false</span><span class="x">,</span>
    <span class="n">verbose</span><span class="o">::</span><span class="kt">Bool</span><span class="o">=</span><span class="nb">true</span><span class="x">,</span>
    <span class="n">progress</span><span class="o">::</span><span class="kt">Bool</span><span class="o">=</span><span class="nb">false</span>
<span class="x">)</span>
</code></pre></div></div>

<p>Sample <code class="language-plaintext highlighter-rouge">n_samples</code> samples using the proposal <code class="language-plaintext highlighter-rouge">Ï„</code> under Hamiltonian <code class="language-plaintext highlighter-rouge">h</code>.</p>

<ul>
  <li>
    <p>The randomness is controlled by <code class="language-plaintext highlighter-rouge">rng</code>.</p>

    <ul>
      <li>If <code class="language-plaintext highlighter-rouge">rng</code> is not provided, <code class="language-plaintext highlighter-rouge">GLOBAL_RNG</code> will be used.</li>
    </ul>
  </li>
  <li>The initial point is given by <code class="language-plaintext highlighter-rouge">Î¸</code>.</li>
  <li>
    <p>The adaptor is set by <code class="language-plaintext highlighter-rouge">adaptor</code>, for which the default is no adaptation.</p>

    <ul>
      <li>It will perform <code class="language-plaintext highlighter-rouge">n_adapts</code> steps of adaptation, for which the default is the minimum of <code class="language-plaintext highlighter-rouge">1_000</code> and 10% of <code class="language-plaintext highlighter-rouge">n_samples</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">drop_warmup</code> controls to drop the samples during adaptation phase or not</li>
  <li><code class="language-plaintext highlighter-rouge">verbose</code> controls the verbosity</li>
  <li><code class="language-plaintext highlighter-rouge">progress</code> controls whether to show the progress meter or not</li>
</ul>

<p><a id="Types"></a></p>

<p><a id="Types-1"></a></p>

<h2 id="types">Types</h2>

<p><a id="AdvancedHMC.AbstractProposal" href="#AdvancedHMC.AbstractProposal">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.AbstractProposal</code></strong> â€” <em>Type</em>.</p>

<p>Abstract Markov chain Monte Carlo proposal.</p>

<p><a id="AdvancedHMC.AbstractTrajectory" href="#AdvancedHMC.AbstractTrajectory">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.AbstractTrajectory</code></strong> â€” <em>Type</em>.</p>

<p>Hamiltonian dynamics numerical simulation trajectories.</p>

<p><a id="AdvancedHMC.AbstractTrajectorySampler" href="#AdvancedHMC.AbstractTrajectorySampler">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.AbstractTrajectorySampler</code></strong> â€” <em>Type</em>.</p>

<p>Sampler carried during the building of the tree.</p>

<p><a id="AdvancedHMC.BinaryTree" href="#AdvancedHMC.BinaryTree">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.BinaryTree</code></strong> â€” <em>Type</em>.</p>

<p>A full binary tree trajectory with only necessary leaves and information stored.</p>

<p><a id="AdvancedHMC.MultinomialTS" href="#AdvancedHMC.MultinomialTS">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.MultinomialTS</code></strong> â€” <em>Type</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MultinomialTS</span><span class="x">{</span><span class="n">F</span><span class="o">&lt;:</span><span class="kt">AbstractFloat</span><span class="x">}</span> <span class="o">&lt;:</span> <span class="n">AbstractTrajectorySampler</span>
</code></pre></div></div>

<p>Multinomial trajectory sampler carried during the building of the tree. It contains the weight of the tree, defined as the total probabilities of the leaves.</p>

<p><a id="AdvancedHMC.MultinomialTS-Tuple{MultinomialTS,AbstractFloat,AdvancedHMC.PhasePoint}" href="#AdvancedHMC.MultinomialTS-Tuple{MultinomialTS,AbstractFloat,AdvancedHMC.PhasePoint}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.MultinomialTS</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MultinomialTS</span><span class="x">(</span><span class="n">s</span><span class="o">::</span><span class="n">MultinomialTS</span><span class="x">,</span> <span class="n">H0</span><span class="o">::</span><span class="kt">AbstractFloat</span><span class="x">,</span> <span class="n">zcand</span><span class="o">::</span><span class="n">PhasePoint</span><span class="x">)</span>
</code></pre></div></div>

<p>Multinomial sampler for a trajectory consisting only a leaf node.</p>

<ul>
  <li>tree weight is the (unnormalised) energy of the leaf.</li>
</ul>

<p><a id="AdvancedHMC.MultinomialTS-Tuple{Random.AbstractRNG,AdvancedHMC.PhasePoint}" href="#AdvancedHMC.MultinomialTS-Tuple{Random.AbstractRNG,AdvancedHMC.PhasePoint}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.MultinomialTS</code></strong> â€” <em>Method</em>.</p>

<p>Multinomial sampler for the starting single leaf tree. (Log) weights for leaf nodes are their (unnormalised) Hamiltonian energies.</p>

<p>Ref: https://github.com/stan-dev/stan/blob/develop/src/stan/mcmc/hmc/nuts/base_nuts.hpp#L226</p>

<p><a id="AdvancedHMC.NUTS" href="#AdvancedHMC.NUTS">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.NUTS</code></strong> â€” <em>Type</em>.</p>

<p>Dynamic trajectory HMC using the no-U-turn termination criteria algorithm.</p>

<p><a id="AdvancedHMC.NUTS-Tuple" href="#AdvancedHMC.NUTS-Tuple">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.NUTS</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NUTS</span><span class="x">(</span><span class="n">args</span><span class="o">...</span><span class="x">)</span> <span class="o">=</span> <span class="n">NUTS</span><span class="x">{</span><span class="n">MultinomialTS</span><span class="x">,</span><span class="n">GeneralisedNoUTurn</span><span class="x">}(</span><span class="n">args</span><span class="o">...</span><span class="x">)</span>
</code></pre></div></div>

<p>Create an instance for the No-U-Turn sampling algorithm with multinomial sampling and original no U-turn criterion.</p>

<p>Below is the doc for NUTS{S,C}.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NUTS{S,C}(
    integrator::I,
    max_depth::Int=10,
    Î”_max::F=1000.0
) where {I&lt;:AbstractIntegrator,F&lt;:AbstractFloat,S&lt;:AbstractTrajectorySampler,C&lt;:AbstractTerminationCriterion}
</code></pre></div></div>

<p>Create an instance for the No-U-Turn sampling algorithm.</p>

<p><a id="AdvancedHMC.NUTS-Union{Tuple{I}, Tuple{C}, Tuple{S}, Tuple{F}, Tuple{I}, Tuple{I,Int64}, Tuple{I,Int64,F}} where C&lt;:AdvancedHMC.AbstractTerminationCriterion where S&lt;:AdvancedHMC.AbstractTrajectorySampler where F&lt;:AbstractFloat where I&lt;:AdvancedHMC.AbstractIntegrator" href="#AdvancedHMC.NUTS-Union{Tuple{I}, Tuple{C}, Tuple{S}, Tuple{F}, Tuple{I}, Tuple{I,Int64}, Tuple{I,Int64,F}} where C&lt;:AdvancedHMC.AbstractTerminationCriterion where S&lt;:AdvancedHMC.AbstractTrajectorySampler where F&lt;:AbstractFloat where I&lt;:AdvancedHMC.AbstractIntegrator">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.NUTS</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NUTS</span><span class="x">{</span><span class="n">S</span><span class="x">,</span><span class="n">C</span><span class="x">}(</span>
    <span class="n">integrator</span><span class="o">::</span><span class="n">I</span><span class="x">,</span>
    <span class="n">max_depth</span><span class="o">::</span><span class="kt">Int</span><span class="o">=</span><span class="mi">10</span><span class="x">,</span>
    <span class="n">Î”_max</span><span class="o">::</span><span class="n">F</span><span class="o">=</span><span class="mf">1000.0</span>
<span class="x">)</span> <span class="k">where</span> <span class="x">{</span><span class="n">I</span><span class="o">&lt;:</span><span class="n">AbstractIntegrator</span><span class="x">,</span><span class="n">F</span><span class="o">&lt;:</span><span class="kt">AbstractFloat</span><span class="x">,</span><span class="n">S</span><span class="o">&lt;:</span><span class="n">AbstractTrajectorySampler</span><span class="x">,</span><span class="n">C</span><span class="o">&lt;:</span><span class="n">AbstractTerminationCriterion</span><span class="x">}</span>
</code></pre></div></div>

<p>Create an instance for the No-U-Turn sampling algorithm.</p>

<p><a id="AdvancedHMC.SliceTS" href="#AdvancedHMC.SliceTS">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.SliceTS</code></strong> â€” <em>Type</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SliceTS</span><span class="x">{</span><span class="n">F</span><span class="o">&lt;:</span><span class="kt">AbstractFloat</span><span class="x">}</span> <span class="o">&lt;:</span> <span class="n">AbstractTrajectorySampler</span>
</code></pre></div></div>

<p>Trajectory slice sampler carried during the building of the tree. It contains the slice variable and the number of acceptable condidates in the tree.</p>

<p><a id="AdvancedHMC.SliceTS-Tuple{Random.AbstractRNG,AdvancedHMC.PhasePoint}" href="#AdvancedHMC.SliceTS-Tuple{Random.AbstractRNG,AdvancedHMC.PhasePoint}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.SliceTS</code></strong> â€” <em>Method</em>.</p>

<p>Slice sampler for the starting single leaf tree. Slice variable is initialized.</p>

<p><a id="AdvancedHMC.SliceTS-Tuple{SliceTS,AbstractFloat,AdvancedHMC.PhasePoint}" href="#AdvancedHMC.SliceTS-Tuple{SliceTS,AbstractFloat,AdvancedHMC.PhasePoint}">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.SliceTS</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SliceTS</span><span class="x">(</span><span class="n">s</span><span class="o">::</span><span class="n">SliceTS</span><span class="x">,</span> <span class="n">H0</span><span class="o">::</span><span class="kt">AbstractFloat</span><span class="x">,</span> <span class="n">zcand</span><span class="o">::</span><span class="n">PhasePoint</span><span class="x">)</span>
</code></pre></div></div>

<p>Create a slice sampler for a single leaf tree:</p>

<ul>
  <li>the slice variable is copied from the passed-in sampler <code class="language-plaintext highlighter-rouge">s</code> and</li>
  <li>the number of acceptable candicates is computed by comparing the slice variable against the current energy.</li>
</ul>

<p><a id="AdvancedHMC.Termination" href="#AdvancedHMC.Termination">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.Termination</code></strong> â€” <em>Type</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Termination</span>
</code></pre></div></div>

<p>Termination reasons</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">dynamic</code>: due to stoping criteria</li>
  <li><code class="language-plaintext highlighter-rouge">numerical</code>: due to large energy deviation from starting (possibly numerical errors)</li>
</ul>

<p><a id="AdvancedHMC.Termination-Union{Tuple{F}, Tuple{MultinomialTS,AdvancedHMC.NUTS,F,F}} where F&lt;:AbstractFloat" href="#AdvancedHMC.Termination-Union{Tuple{F}, Tuple{MultinomialTS,AdvancedHMC.NUTS,F,F}} where F&lt;:AbstractFloat">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.Termination</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Termination</span><span class="x">(</span><span class="n">s</span><span class="o">::</span><span class="n">MultinomialTS</span><span class="x">,</span> <span class="n">nt</span><span class="o">::</span><span class="n">NUTS</span><span class="x">,</span> <span class="n">H0</span><span class="o">::</span><span class="n">F</span><span class="x">,</span> <span class="n">Hâ€²</span><span class="o">::</span><span class="n">F</span><span class="x">)</span> <span class="k">where</span> <span class="x">{</span><span class="n">F</span><span class="o">&lt;:</span><span class="kt">AbstractFloat</span><span class="x">}</span>
</code></pre></div></div>

<p>Check termination of a Hamiltonian trajectory.</p>

<p><a id="AdvancedHMC.Termination-Union{Tuple{F}, Tuple{SliceTS,AdvancedHMC.NUTS,F,F}} where F&lt;:AbstractFloat" href="#AdvancedHMC.Termination-Union{Tuple{F}, Tuple{SliceTS,AdvancedHMC.NUTS,F,F}} where F&lt;:AbstractFloat">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.Termination</code></strong> â€” <em>Method</em>.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Termination</span><span class="x">(</span><span class="n">s</span><span class="o">::</span><span class="n">SliceTS</span><span class="x">,</span> <span class="n">nt</span><span class="o">::</span><span class="n">NUTS</span><span class="x">,</span> <span class="n">H0</span><span class="o">::</span><span class="n">F</span><span class="x">,</span> <span class="n">Hâ€²</span><span class="o">::</span><span class="n">F</span><span class="x">)</span> <span class="k">where</span> <span class="x">{</span><span class="n">F</span><span class="o">&lt;:</span><span class="kt">AbstractFloat</span><span class="x">}</span>
</code></pre></div></div>

<p>Check termination of a Hamiltonian trajectory.</p>

<p><a id="AdvancedHMC.Transition" href="#AdvancedHMC.Transition">#</a>
<strong><code class="language-plaintext highlighter-rouge">AdvancedHMC.Transition</code></strong> â€” <em>Type</em>.</p>

<p>A transition that contains the phase point and other statistics of the transition.</p>

:ET